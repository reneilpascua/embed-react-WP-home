{"version":3,"sources":["components/TrademarkSearchV2.js","App.js","serviceWorker.js","index.js"],"names":["StyledTableCell","makeStyles","table","minWidth","withStyles","theme","head","body","fontSize","TableCell","StyledTableRow","root","backgroundColor","palette","action","hover","TableRow","useStyles1","flexShrink","marginLeft","spacing","TablePaginationActions","props","classes","useTheme","count","page","rowsPerPage","onChangePage","className","IconButton","onClick","event","disabled","aria-label","direction","Math","ceil","max","TrademarkSearchV2","getSearchTerms","searchString","state","search","validateSearchString","url","console","log","fetch","then","response","json","tempData","setState","data","handleTextFieldChange","searchTerm","target","value","handleChange","handleChangePage","newPage","handleChangeRowsPerPage","parseInt","this","id","TextField","label","fullWidth","variant","defaultValue","onChange","Button","color","TableContainer","component","Paper","Table","table-layout","TableHead","width","align","TableBody","test","slice","map","row","key","applicationNumberL","scope","heading","statusDescEn","niceClasses","join","src","TableFooter","TablePagination","rowsPerPageOptions","colSpan","length","SelectProps","inputProps","native","onChangeRowsPerPage","ActionsComponent","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.679dd09d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, makeStyles, useTheme } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport TableFooter from '@material-ui/core/TableFooter';\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 700,\n    },\n});\n\nconst StyledTableCell = withStyles((theme) => ({\n    head: {\n        //   backgroundColor: theme.palette.common.black,\n        //   color: theme.palette.common.white,\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell);\n\nconst StyledTableRow = withStyles((theme) => ({\n    root: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow);\n\nconst useStyles1 = makeStyles((theme) => ({\n    root: {\n        flexShrink: 0,\n        marginLeft: theme.spacing(2.5),\n        minWidth: 200,\n    },\n}));\n\nfunction TablePaginationActions(props) {\n    const classes = useStyles1();\n    const theme = useTheme();\n    const { count, page, rowsPerPage, onChangePage } = props;\n\n    const handleFirstPageButtonClick = (event) => {\n        onChangePage(event, 0);\n    };\n\n    const handleBackButtonClick = (event) => {\n        onChangePage(event, page - 1);\n    };\n\n    const handleNextButtonClick = (event) => {\n        onChangePage(event, page + 1);\n    };\n\n    const handleLastPageButtonClick = (event) => {\n        onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n    };\n\n    return (\n        <div className={classes.root}>\n            <IconButton\n                onClick={handleFirstPageButtonClick}\n                disabled={page === 0}\n                aria-label=\"first page\"\n            >\n                {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n            </IconButton>\n            <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n                {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n            </IconButton>\n            <IconButton\n                onClick={handleNextButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"next page\"\n            >\n                {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n            </IconButton>\n            <IconButton\n                onClick={handleLastPageButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"last page\"\n            >\n                {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n            </IconButton>\n        </div>\n    );\n}\n\nTablePaginationActions.propTypes = {\n    count: PropTypes.number.isRequired,\n    onChangePage: PropTypes.func.isRequired,\n    page: PropTypes.number.isRequired,\n    rowsPerPage: PropTypes.number.isRequired,\n};\n\nexport class TrademarkSearchV2 extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: [],\n            search: '',\n            url: 'https://localhost:5001/api/trademark/',\n            page: 0,\n            rowsPerPage: 5\n        };\n\n    }\n\n    // generateRows = () => {\n    //     console.log(this.state.data);\n    //     return (this.state.data).map(row => {\n    //         return <React.Fragment key={row.applicationNumberL[0]}>\n    //         <TableRow>\n    //             <StyledTableRow key={row.applicationNumberL[0]}>\n    //                 <TableCell component=\"th\" scope=\"row\">\n    //                     {row.heading}\n    //                 </TableCell>\n    //                 <StyledTableCell>{row.statusDescEn}</StyledTableCell>\n    //                 <StyledTableCell align=\"right\">{row.niceClasses.join(', ')}</StyledTableCell>\n    //             </StyledTableRow>\n    //         </TableRow>\n    //         </React.Fragment>\n    //     })\n    // }\n\n    getSearchTerms = () => {\n        var searchString = this.state.search;\n        if (this.validateSearchString()) {\n            let url = this.state.url + searchString;\n            console.log(this.state.search);\n            fetch(url)\n                .then(response => response.json())\n                .then(tempData => {\n                    this.setState({\n                        data: tempData.data,\n                    })\n                });\n        }\n    }\n\n    handleTextFieldChange = (event) => {\n        this.setState({\n            searchTerm: event.target.value\n        });\n    }\n\n    test() {\n        console.log(this.state.data);\n    }\n\n    validateSearchString() {\n        return true;\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            search: event.target.value\n        });\n    }\n\n    handleChangePage = (event, newPage) => {\n        this.setState({\n            page: newPage\n        });\n    };\n\n    handleChangeRowsPerPage = (event) => {\n        this.setState({\n            rowsPerPage: parseInt(event.target.value, 10)\n        });\n        this.setState({\n            page: 0\n        });\n    };\n\n    render() {\n        return (\n            <>\n                <div id=\"container\">\n                    <div id=\"searchBox\">\n                        <TextField\n                            id=\"search\"\n                            label=\"Search a trademark\"\n                            fullWidth\n                            variant=\"outlined\"\n                            value={this.state.search}\n                            defaultValue=\"\"\n                            onChange={this.handleChange} />\n                    </div>\n                    <Button color=\"primary\" variant=\"contained\" id=\"searchBtn\" onClick={this.getSearchTerms}>Search</Button>\n\n\n                    <TableContainer component={Paper}>\n                        <Table aria-label=\"simple table\" table-layout=\"fixed\">\n                            <TableHead>\n                                <TableRow>\n                                    <StyledTableCell width=\"25%\"><b>Trademark</b></StyledTableCell>\n                                    <StyledTableCell align=\"left\" width=\"15%\"><b>CIPO Status</b></StyledTableCell>\n                                    <StyledTableCell align=\"left\" width=\"35%\"><b>Nice Classes</b></StyledTableCell>\n                                    <StyledTableCell align=\"left\" width=\"10%\"><b>Image</b></StyledTableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {this.test()}\n\n                                {this.state.data != null && (this.state.rowsPerPage > 0\n                                    ? (this.state.data).slice(this.state.page * this.state.rowsPerPage, this.state.page * this.state.rowsPerPage + this.state.rowsPerPage)\n                                    : this.state.data\n                                ).map((row) => (\n                                    <StyledTableRow key={row.applicationNumberL[0]} width=\"25%\">\n                                        <TableCell component=\"th\" scope=\"row\">\n                                            {row.heading}\n                                        </TableCell>\n                                        <StyledTableCell align=\"left\" width=\"15%\">{row.statusDescEn}</StyledTableCell>\n                                        <StyledTableCell align=\"left\" width=\"35%\">{row.niceClasses.join(', ')}</StyledTableCell>\n                                        <StyledTableCell align=\"left\" width=\"10%\"><img className=\"rowImage\" src='https://i.picsum.photos/id/945/536/354.jpg?hmac=VuYuUPHKNubjREdR4hkLOLHkhYnoZINbXG3ssAFtpno'></img></StyledTableCell>\n                                    </StyledTableRow>\n                                ))}\n                            </TableBody>\n                            <TableFooter>\n                                <TableRow>\n                                    <TablePagination\n                                        rowsPerPageOptions={[5, 10, 25, 50]}\n                                        colSpan={4}\n                                        count={this.state.data.length}\n                                        rowsPerPage={this.state.rowsPerPage}\n                                        page={this.state.page}\n                                        SelectProps={{\n                                            inputProps: { 'aria-label': 'rows per page' },\n                                            native: true,\n                                        }}\n                                        onChangePage={this.handleChangePage}\n                                        onChangeRowsPerPage={this.handleChangeRowsPerPage}\n                                        ActionsComponent={TablePaginationActions}\n                                    />\n                                </TableRow>\n                            </TableFooter>\n                        </Table>\n                    </TableContainer>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default TrademarkSearchV2","import React from 'react';\nimport './App.css';\nimport TrademarkSearchV2 from './components/TrademarkSearchV2';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <TrademarkSearchV2 />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('unique-react-ctr')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}